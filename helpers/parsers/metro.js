const metroReward = {
	'money': /üíµ–î–µ–Ω—å–≥–∏:\s(\d+)/,
	'tokens': /üï≥–ñ–µ—Ç–æ–Ω—ã:\s(\d+)/,
	'bolts': /üî©–°—ã—Ä—å—ë:\s(\d+)/,
	'knowledge': /üìö–ó–Ω–∞–Ω–∏—è:\s(\d+)/,
	'details': /–î–µ—Ç–∞–ª–∏:\s(\d+)/,
	'burgers': /üçî–ë—É—Ä–≥–µ—Ä:\s(\d+)/,
	'pizzas': /üçï–ü–∏—Ü—Ü–∞:\s(\d+)/,
	'hotdogs': /üå≠–•–æ—Ç–¥–æ–≥:\s(\d+)/,
}
const upgrades =  {
	'white': /‚ö™Ô∏è–£–ª—É—á—à–µ–Ω–∏—è:\s(\d+)/,
	'blue': /üîµ–£–ª—É—á—à–µ–Ω–∏—è:\s(\d+)/,
	'red': /üî¥–£–ª—É—á—à–µ–Ω–∏—è:\s(\d+)/
}

module.exports = function(text) {
	if(text == null || typeof text != "string")
		return null;
		
	if(text.indexOf("–¢—ã –≤—ã—à–µ–ª –∏–∑ –º–µ—Ç—Ä–æ –¥–æ—Å—Ä–æ—á–Ω–æ.") == 0 || text.indexOf("–ü–æ–ª—É—á–µ–Ω–æ") == 0 || text.indexOf("–¢–µ–±—è –∑–∞–≤–∞–ª–∏–ª–æ –æ–±—Ä—É—à–∏–≤—à–∏–º—Å—è –ø–æ—Ç–æ–ª–∫–æ–º, –Ω–æ —Å–ø–∞—Å–∞—Ç–µ–ª–∏ –≤–æ–≤—Ä–µ–º—è —Ç–µ–±—è –≤—ã—Ç–∞—â–∏–ª–∏. –í –Ω–∞–≥—Ä–∞–¥—É –æ–Ω–∏ –∑–∞–±—Ä–∞–ª–∏ –¥–≤–µ —Ç—Ä–µ—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ.") == 0) {
		let res = {
			statistics: {
				upgrades: {}
			}
		};
		
		if(text.indexOf("–¢–µ–±—è –∑–∞–≤–∞–ª–∏–ª–æ –æ–±—Ä—É—à–∏–≤—à–∏–º—Å—è –ø–æ—Ç–æ–ª–∫–æ–º, –Ω–æ —Å–ø–∞—Å–∞—Ç–µ–ª–∏ –≤–æ–≤—Ä–µ–º—è —Ç–µ–±—è –≤—ã—Ç–∞—â–∏–ª–∏. –í –Ω–∞–≥—Ä–∞–¥—É –æ–Ω–∏ –∑–∞–±—Ä–∞–ª–∏ –¥–≤–µ —Ç—Ä–µ—Ç–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ.") == 0) {
			text = text.substr(text.indexOf("–ü–æ–ª—É—á–µ–Ω–æ"));
		}
		
		if(text.indexOf("–¢—ã –≤—ã—à–µ–ª –∏–∑ –º–µ—Ç—Ä–æ –¥–æ—Å—Ä–æ—á–Ω–æ.") == 0) {
			res.statistics.atime = 1;
		} else {
			res.statistics.intime = 1;
		}
		
		let regexes = Object.keys(metroReward);
		
		for(let i = 0; i < regexes.length; i++) {
			let reg = metroReward[regexes[i]];
			
			let m = text.match(reg);
			console.log(m);
			if(m != null) {
				if(m[1] != null && !Number.isNaN(parseInt(m[1]))) {
					res.statistics[regexes[i]] = parseInt(m[1]);
				}
			}
		}
		
		regexes = Object.keys(upgrades);
		
		for(let i = 0; i < regexes.length; i++) {
			let reg = upgrades[regexes[i]];
			
			let m = text.match(reg);
			console.log(m);
			if(m != null) {
				if(m[1] != null && !Number.isNaN(parseInt(m[1]))) {
					res.statistics.upgrades[regexes[i]] = parseInt(m[1]);
				}
			}
		}
		
		return res;
		
	}

	return null;
}